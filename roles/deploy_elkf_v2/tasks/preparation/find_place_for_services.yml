---
############
# ELASTIC
############

- name: Find host for all elastic nodes
  include_tasks: place_service.yml
  loop: "{{ range(count_elastic_nodes | int) | list | product(play_hosts) | list }}"
  vars:
    service_node_name: "{{ elkf_stack_nodename_prefix_elastic ~ item.0 }}"
    service_node_index: "{{ item.0 }}"
    service_name: elastic
    current_host: "{{ item.1 }}"

- name: Check all elastic nodes are present or scheduled to hosts
  debug: msg="Checking {{ elkf_stack_nodename_prefix_elastic ~ elastic_index }}"
  failed_when: elkf_stack_nodename_prefix_elastic ~ elastic_index not in (play_hosts | map('extract', hostvars) | map(attribute='elkf_services_elastic') | flatten )
  loop: "{{ range(count_elastic_nodes | int) | list }}"
  loop_control:
    loop_var: elastic_index

- name: Calculate Elastic API & Discovery ports
  include_tasks: calculate_endpoints.yml
  loop: "{{ range(count_elastic_nodes | int) | list | product(play_hosts) | list }}"
  vars:
    service_node_name: "{{ elkf_stack_nodename_prefix_elastic ~ item.0 }}"
    service_node_index: "{{ item.0 }}"
    current_host: "{{ item.1 }}"
    port_discovery: "{{ elkf_stack_starting_ports_elastic_discovery|int + service_node_index|int }}"
    port_api: "{{ elkf_stack_starting_ports_elastic_api|int + service_node_index|int }}"

- name: Calculate Elastic API & Discovery endpoints
  set_fact:
    elkf_elastic_endpoints_discovery: "{{ play_hosts | map('extract', hostvars) | map(attribute='elkf_elastic_disc_temp') | flatten }}" 
    elkf_elastic_endpoints_api: "{{ play_hosts | map('extract', hostvars) | map(attribute='elkf_elastic_api_temp') | flatten }}" 
  delegate_facts: true
  delegate_to: "{{ item }}"
  loop: "{{ play_hosts }}"

############
# KIBABA
############

- name: Find host for all kibana nodes
  include_tasks: place_service.yml
  loop: "{{ range(count_kibana_nodes | int) | list | product(play_hosts) | list }}"
  vars:
    service_node_name: "{{ elkf_stack_nodename_prefix_kibana ~ item.0 }}"
    service_name: kibana
    current_host: "{{ item.1 }}"

- name: Check all kibana nodes are present or scheduled to hosts
  debug: msg="Checking {{ elkf_stack_nodename_prefix_kibana ~ kibana_index }}"
  failed_when: elkf_stack_nodename_prefix_kibana ~ kibana_index not in (play_hosts | map('extract', hostvars) | map(attribute='elkf_services_kibana') | flatten )
  loop: "{{ range(count_kibana_nodes | int) | list }}"
  loop_control:
    loop_var: kibana_index

- name: Calculate Kibana web endpoints
  include_tasks: calculate_kibana_endpoints.yml
  loop: "{{ range(count_kibana_nodes | int) | list | product(play_hosts) | list }}"
  vars:
    service_node_name: "{{ elkf_stack_nodename_prefix_kibana ~ item.0 }}"
    current_host: "{{ item.1 }}"
    service_node_index: "{{ item.0 }}"
    port_web: "{{ elkf_stack_starting_ports_kibana_web|int +  service_node_index|int }}"

############
# FILEBEAT
############

- name: Find host for all filebeat nodes
  include_tasks: place_service.yml
  loop: "{{ range(count_filebeat_nodes | int) | list | product(play_hosts) | list }}"
  vars:
    service_node_name: "{{ elkf_stack_nodename_prefix_filebeat ~ item.0 }}"
    service_name: filebeat
    current_host: "{{ item.1 }}"

- name: Check all filebeat nodes are present or scheduled to hosts
  debug: msg="Checking {{ elkf_stack_nodename_prefix_filebeat ~ filebeat_index }}"
  failed_when: elkf_stack_nodename_prefix_filebeat ~ filebeat_index not in (play_hosts | map('extract', hostvars) | map(attribute='elkf_services_filebeat') | flatten )
  loop: "{{ range(count_filebeat_nodes | int) | list }}"
  loop_control:
    loop_var: filebeat_index

- name: Calculate filebeat endpoints
  include_tasks: calculate_filebeat_endpoints.yml
  loop: "{{ range(count_filebeat_nodes | int) | list | product(play_hosts) | list }}"
  vars:
    service_node_name: "{{ elkf_stack_nodename_prefix_filebeat ~ item.0 }}"
    current_host: "{{ item.1 }}"
    service_node_index: "{{ item.0 }}"

############
# LOGSTASH
############

- name: Find host for all logstash nodes
  include_tasks: place_service.yml
  loop: "{{ range(count_logstash_nodes | int) | list | product(play_hosts) | list }}"
  vars:
    service_node_name: "{{ elkf_stack_nodename_prefix_logstash ~ item.0 }}"
    service_name: logstash
    current_host: "{{ item.1 }}"

- name: Check all logstash nodes are present or scheduled to hosts
  debug: msg="Checking {{ elkf_stack_nodename_prefix_logstash ~ logstash_index }}"
  failed_when: elkf_stack_nodename_prefix_logstash ~ logstash_index not in (play_hosts | map('extract', hostvars) | map(attribute='elkf_services_logstash') | flatten )
  loop: "{{ range(count_logstash_nodes | int) | list }}"
  loop_control:
    loop_var: logstash_index

- name: Calculate logstash endpoints
  include_tasks: calculate_logstash_endpoints.yml
  loop: "{{ range(count_logstash_nodes | int) | list | product(play_hosts) | list }}"
  vars:
    service_node_name: "{{ elkf_stack_nodename_prefix_logstash ~ item.0 }}"
    current_host: "{{ item.1 }}"
    service_node_index: "{{ item.0 }}"


# ansible_memfree_mb