---
- name: Find services count to deploy
  set_fact:
    count_elastic_nodes: "{{ elastic | default(0) }}"
    count_kibana_nodes: "{{ kibana | default(0) }}"
    count_logstash_nodes: "{{ logstash | default(0) }}"
    count_filebeat_nodes: "{{ filebeat | default(0) }}"

############
# ELASTIC
############

- name: Find host for all elastic nodes
  include_tasks: place_service.yml
  loop: "{{ range(count_elastic_nodes | int) | list | product(play_hosts) | list }}"
  vars:
    service_node_name: "{{ elkf_stack_nodename_prefix_elastic ~ item.0 }}"
    service_node_index: "{{ item.0 }}"
    service_name: elastic
    current_host: "{{ item.1 }}"

- name: Check all elastic nodes are present or scheduled to hosts
  debug: msg="Checking {{ elkf_stack_nodename_prefix_elastic ~ elastic_index }}"
  failed_when: elkf_stack_nodename_prefix_elastic ~ elastic_index not in (play_hosts | map('extract', hostvars) | map(attribute='elkf_services_elastic') | flatten )
  loop: "{{ range(count_elastic_nodes | int) | list }}"
  loop_control:
    loop_var: elastic_index

- name: Calculate Elastic API & Discovery endpoints
  set_fact:
    elkf_services_elastic_ports: "{{ hostvars[current_host]['elkf_services_elastic_ports'] + [{
      'node_name': elkf_stack_nodename_prefix_elastic ~ item.0,
      'port_api': port_api,
      'port_discovery': port_discovery
    }] }}"
    elkf_elastic_disc_temp: "{{ hostvars[current_host]['elkf_elastic_seeds_temp']|default([]) + [
      hostvars[current_host]['ansible_eth0']['ipv4']['address'] ~ ':' ~ port_discovery
    ] }}"
    elkf_elastic_api_temp: "{{ hostvars[current_host]['elkf_elastic_api_temp']|default([]) + [
      hostvars[current_host]['ansible_eth0']['ipv4']['address'] ~ ':' ~ port_api
    ] }}"
  loop: "{{ range(count_elastic_nodes | int) | list | product(play_hosts) | list }}"
  when: service_node_name in hostvars[current_host]['elkf_services_elastic']
  delegate_to: "{{ current_host }}"
  delegate_facts: true
  vars:
    service_node_name: "{{ elkf_stack_nodename_prefix_elastic ~ item.0 }}"
    service_node_index: "{{ item.0 }}"
    current_host: "{{ item.1 }}"
    port_discovery: "{{ elkf_stack_starting_ports_elastic_discovery + service_node_index }}"
    port_api: "{{ elkf_stack_starting_ports_elastic_api + service_node_index }}"

############
# KIBABA
############

- name: Find host for all kibana nodes
  include_tasks: place_service.yml
  loop: "{{ range(count_kibana_nodes | int) | list | product(play_hosts) | list }}"
  vars:
    service_node_name: "{{ elkf_stack_nodename_prefix_kibana ~ item.0 }}"
    service_name: kibana
    current_host: "{{ item.1 }}"

- name: Check all kibana nodes are present or scheduled to hosts
  debug: msg="Checking {{ elkf_stack_nodename_prefix_kibana ~ kibana_index }}"
  failed_when: elkf_stack_nodename_prefix_kibana ~ kibana_index not in (play_hosts | map('extract', hostvars) | map(attribute='elkf_services_kibana') | flatten )
  loop: "{{ range(count_kibana_nodes | int) | list }}"
  loop_control:
    loop_var: kibana_index

############
# FILEBEAT
############

- name: Find host for all filebeat nodes
  include_tasks: place_service.yml
  loop: "{{ range(count_filebeat_nodes | int) | list | product(play_hosts) | list }}"
  vars:
    service_node_name: "{{ elkf_stack_nodename_prefix_filebeat ~ item.0 }}"
    service_name: filebeat
    current_host: "{{ item.1 }}"

- name: Check all filebeat nodes are present or scheduled to hosts
  debug: msg="Checking {{ elkf_stack_nodename_prefix_filebeat ~ filebeat_index }}"
  failed_when: elkf_stack_nodename_prefix_filebeat ~ filebeat_index not in (play_hosts | map('extract', hostvars) | map(attribute='elkf_services_filebeat') | flatten )
  loop: "{{ range(count_filebeat_nodes | int) | list }}"
  loop_control:
    loop_var: filebeat_index

############
# LOGSTASH
############

- name: Find host for all logstash nodes
  include_tasks: place_service.yml
  loop: "{{ range(count_logstash_nodes | int) | list | product(play_hosts) | list }}"
  vars:
    service_node_name: "{{ elkf_stack_nodename_prefix_logstash ~ item.0 }}"
    service_name: logstash
    current_host: "{{ item.1 }}"

- name: Check all logstash nodes are present or scheduled to hosts
  debug: msg="Checking {{ elkf_stack_nodename_prefix_logstash ~ logstash_index }}"
  failed_when: elkf_stack_nodename_prefix_logstash ~ logstash_index not in (play_hosts | map('extract', hostvars) | map(attribute='elkf_services_logstash') | flatten )
  loop: "{{ range(count_logstash_nodes | int) | list }}"
  loop_control:
    loop_var: logstash_index


# ansible_memfree_mb