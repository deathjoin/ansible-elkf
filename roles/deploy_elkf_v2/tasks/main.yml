---
- name: Get available memory for each host (and set few defaults)
  set_fact:
    # host remaining memory
    elkf_remaining_memory: "{{ ansible_memfree_mb }}"
    # service nodes lists
    elkf_services_elastic: []
    elkf_services_kibana: []
    elkf_services_logstash: []
    elkf_services_filebeat: []
    elkf_elastic_disc_temp: []
    elkf_elastic_api_temp: []
    elkf_services_elastic_ports: []
    elkf_elastic_node_names: []

- name: Echo vars
  debug: "var=elkf_remaining_memory"

- name: Get docker info from play hosts
  docker_host_info:
    verbose_output: yes
    containers: yes
    containers_filters:
      label:
        - "elkf_stack_cluster_name={{ elkf_stack_cluster_name }}"
  register: docker_host_info

# check for running cluster containers on host
# so we can skip memory calculation and host placement for them
- name: Check for running cluster containers
  include_tasks: preparation/check_running_containers.yml
  loop: "{{ docker_host_info.containers }}"
  loop_control:
    loop_var: container

- name: Find hosts for services & calc endpoints
  become: no
  connection: local
  run_once: true
  import_tasks: preparation/find_place_for_services.yml

- name: Echo vars
  debug: "var=elkf_elastic_node_names"

- name: Echo vars
  debug: var=elkf_elastic_endpoints_discovery

- name: Echo vars
  debug: var=elkf_services_elastic_ports

- name: Deploy Elastic
  include_tasks: deployment/deploy_elastic.yml

- name: Remove excess Elastic containers
  docker_container:
    state: absent
    name: "{{ container.Labels.elkf_stack_node_name }}"
  loop: "{{ docker_host_info.containers }}"
  loop_control:
    loop_var: container
  when: 
  - container.Labels.elkf_stack_node_name not in elkf_services_elastic_ports | map(attribute='node_name')
  - container.Labels.elkf_stack_service == 'elastic'

- name: "Healthchech ELKF: ElasticSearch"
  docker_container_info:
    name: "{{ first_es_node_name }}"
  register: result
  until: result.container.State.Health.Status == 'healthy'
  retries: 5
  delay: 10
  vars:
    first_es_node_name: "{{ elkf_services_elastic_ports | map(attribute='node_name') | first }}"